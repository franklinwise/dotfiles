package auth

import (
	"github.com/krave-n/go/caching"
	"github.com/krave-n/go/logging"
)

type DeviceAuthHeader struct {
	AuthToken  string `json:"X-KSN-Auth"`
	DeviceUid  string `json:"X-KSN-DeviceUid"`
	TraceId    string `json:"X-KSN-Trace"`
	AppVersion string `json:"X-KSN-AppVersion"`
	OsVersion  string `json:"X-KSN-OSVersion"`
	LocationId int    `json:"X-KSN-Location, string"`
}

type AuthenticatedDevice struct {
	DeviceUid string         `json:"deviceUid"`
	Location  RetailLocation `json:"retailLocation"`
}

type RetailLocation struct {
	LocationId   int    `json:"locationId"`
	LocationUid  string `json:"locationUid"`
	LocationName string `json:"locationName"`
	AccountName  string `json:"accountName"`
	AccountId    int    `json:"accountId"`
}

type AuthService struct {
	Cache *caching.CacheService `inject:"authCache"`
	Log   *logging.Logger       `inject:""`
}

func NewService() *AuthService {
	return new(AuthService)
}

// AuthenticateDevice evaluates if the supplied arguments represent a valid identity and if so, return an
// AuthenticatedDevice instance.
func (s *AuthService) AuthenticateDevice(authToken string, deviceUid string, locationId int) *AuthenticatedDevice {
	d := new(AuthenticatedDevice)
	if err := s.cache.Get(authToken, &d); err != nil {
		s.log.Error(err)
		return nil
	}

	if d != nil && d.Location.LocationId == locationId && d.DeviceUid == deviceUid {
		return d
	} else {
		return nil
	}
}
