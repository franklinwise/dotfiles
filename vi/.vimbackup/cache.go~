package caching

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/garyburd/redigo/redis"
	"github.com/krave-n/go/logging"
)

type CacheService struct {
	Pool *redis.Pool
	Log  *logging.Logger `inject:""`
}

// NewCacheService creates a new cache service connecting to the given
// hostUri and hostPassword. If there is no hostPassword, then pass an empty string.
func NewService(hostUri, hostPassword string) *CacheService {
	s := new(CacheService)
	s.Pool = newPool(hostUri, hostPassword)
	return s
}

// Get value from cache by key.
func (s *CacheService) Get(key string, instance interface{}) error {
	if s.Pool == nil {
		return errors.New("pool is null")
	}
	conn, err := s.Pool.Dial()
	if err != nil {
		return err
	}

	defer conn.Close()

	str, err := redis.String(conn.Do("GET", key))
	if err != nil {
		return err
	}

	if err = json.Unmarshal([]byte(str), &instance); err != nil {
		s.Log.UnmarshalFailed(err)
		return err
	}
	return nil
}

// Set a value in cache by the given key.
func (s *CacheService) Set(key string, instance interface{}) error {
	if s.Pool == nil {
		return errors.New("pool is null")
	}
	conn, err := s.Pool.Dial()
	if err != nil {
		return err
	}
	defer conn.Close()

	if value, err := json.Marshal(instance); err != nil {
		s.Log.MarshalFail(err)
		return err
	} else if _, err = redis.String(conn.Do("SET", key, value)); err != nil {
		return err
	}
	return nil
}

func newPool(server, password string) *redis.Pool {
	return &redis.Pool{
		MaxIdle:     3,
		IdleTimeout: 240 * time.Second,
		Dial: func() (redis.Conn, error) {
			c, err := redis.Dial("tcp", server)
			if err != nil {
				return nil, err
			}
			if password != "" {
				if _, err := c.Do("AUTH", password); err != nil {
					c.Close()
					return nil, err
				}
			}
			return c, err
		},
		TestOnBorrow: func(c redis.Conn, t time.Time) error {
			_, err := c.Do("PING")
			return err
		},
	}
}
